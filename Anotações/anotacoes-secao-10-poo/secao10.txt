1 - como descobrir qual o prototype(O objeto construtor)  de um objeto.

const pessoa = {
    maos: 2,
}

console.log(Object.getPrototypeOf(pessoa));


2 - como criar um novo objeto a partir de um outro objeto.

const pessoa = {
    maos: 2,
}

const pessoaNova = Object.create(pessoa);

console.log(pessoaNova.hasOwnProperty("maos")); => false
 // testando se pessoaNova tem as proprias propriedades  


console.log(Object.getPrototypeOf(pessoaNova) == pessoa);  => true  // testando se pessoa é o prototype de pessoaNova.






3 - como instancia(Criar um novo objeto) por função. Exemplo: (Constructor).
function criarCachorro (raca, patas, cor) {
    let cachorro = Object.create({});
    cachorro.raca = raca;
    cachorro.patas = patas;
    cachorro.cor = cor;
    return cachorro;
}

let doberman = criarCachorro("Doberman", 4, "Preto");

console.log(doberman);
console.log(doberman.raca);
console.log(doberman.patas);
console.log(doberman.cor);



4 - Adicionando método ao prototype

function Cachorro(raca, patas, cor) {
    this.raca = raca;
    this.patas = patas;
    this.cor = cor;
}

Cachorro.prototype.uivar = function() { // Adiciona o método ao prototype e não ao filho.
    console.log("Auuuu...");
}




5 - metodos e propriedades em uma classe

Usando o class, não é possível adicionar propriedades fora do constructor direto na class, para adicionar propriedades nesse caso eu teria que adicionar a propriedade direto no constructor ou via prototype.




6 - override

define o valor de uma propriedade do prototype para ficar com um valor padrão, por exemplo.


class Cachorro {
    constructor(raca, patas, cor) {
        this.raca = raca;
        this.cor = cor;
    }
}

Cachorro.prototype.patas = 4;   // se eu não tiver definido o valor da propriedade patas, posso usar a propriedade patas do prototype, que já vem com um valor padrão que defini como 4, se por um acaso neste exemplo o cachorro só tiver 3 patas, posso passar esse valor por parâmetro para a propriedade patas e usa-la.

let Pastor = new Cachorro("Pastor Alemão", 3, "Caramelo"); 




7 - symbol 

Serve para se conseguir fazer uma constante em uma propriedade de objeto.
Não podem ser alteradas e nem ser criadas 2 vezes, parecido com o const de js


let patas = Symbol();

Cachorro.prototype[patas] = 4;


//Acessando o symbol
console.log(Cachorro.prototype[patas]);
console.log(Objeto[patas]);




8 - Getters e Setters

* Get: serve para resgatar o valor de um propriedade;
* Set: serve para alterar o valor de um propriedade;
