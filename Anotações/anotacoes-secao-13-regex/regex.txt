O que são Regex:
Expressões regulares são padrões utilizados para selecionar combinações de caracteres em uma string


1 - Neste exemplo foi criado um regex para ver se existe a palavra bola na string.

const reg1 = new RegExp("bola");

console.log(reg1.test("tem bola?"));  => true
console.log(reg1.test("não tem"));  => false

outra forma de se fazer

const reg2 = /bola/;

console.log(reg1.test("tem bola?"));
console.log(reg1.test("não tem"));

outra forma

const reg2 = /bola/;

let text = "Tem bola na cesta";

console.log(reg2.test(text) => true;



2 - alguns caracteres especiais regex

\d - Qualquer número de caractere, o mesmo que [0-9]
\w - Um caratere alfanumérico ("teste")
\s - Qualquer caractere de espaço em branco.
\D - Caracteres que não são dígitos
\W - Caractere não-alfanumérico
\S - Caractere que não seja espaço em branco
 . - Qualquer caractere, menos nova linha.


3 - operador not

const notab = /[^ab]/;  => não aceita a e b;

4 - operador plus

* Quando um + está após alguma expressão, este elemento pode se repetir mais de uma vez. Exemplo:

const umOuMaisNumeros = /\d+/;

console.log(umOuMaisNumeros.test("1234")); // true
console.log(umOuMaisNumeros.test("1")); // true
console.log(umOuMaisNumeros.test("asdf")); // false
console.log(umOuMaisNumeros.test(" ")); // false


5 - operador question

const padrao2 = /\d+\w?/; // Aceita número indefinido de digitos e tbm letras.

console.log(padrao2.test('123')); //true
console.log(padrao2.test('123asdf')); // true
console.log(padrao2.test('123 ')); //true


6 - operador de precisão

* inserir o número de ocorrência entre {};

const cep = /\d{5}-\d{3}/;  ->  console.log(cep.test('74970-690')); regex para validação de cep

const tel = /\(\d{2}\)\s\d{4,5}-\d{4}/;  -> console.log(tel.test('(62) 99238-5571')); - regex para validção de telefone


7 - Método exec // não é muito utilizado

* O método exec nos retorna um objeto com algumas informações sobre a regex;
* Se nada for encontrado, retorna null;

const digitos = /\d+/;

console.log(digitos.exec('tem o número 100 aqui')); // retorna um objeto com algumas informações. ex: index do padrão encontrado e etc.

console.log(digitos.exec('tem o número aqui')); // retorna null pois n foi encontrado um padrão compatível com a regex.



8 - match // Obs: não é muito utilizado

* O método match funciona de forma similar ao exec, mas é um método que tem que ser utilizado na string como no exemplo abaixo; 

const frase = 'O número 100 está aqui'.match(/\d+/);

console.log(frase);


9 - Choice pattern

* Podemos colocar um instrução na regex que funciona como um || (or) das condicionais;


const reg = /\w+: (Wesley|João|Maria)/; == nome: Wesley -> true

console.log(reg.test('Nome: Wesley'));
console.log(reg.test('Nome: José'));
console.log(reg.test('Nome: Maria'));



10 - reger para validar domínio

const  validarDominio = /[?www.]\w+\.com|.com.br/;

console.log(validarDominio.test('wwww.google.com')); //true

console.log(validarDominio.test('google.com)); // true



